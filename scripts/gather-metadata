#!/usr/bin/env python
##!/software/anaconda2/envs/msmb/bin/python

"""
Find trajectories and associated metadata

msmbuilder autogenerated template version 2
created 2018-01-18T11:58:44.108559
please cite msmbuilder in any publications

adjusted by: Aunity
date: 2018.01.25
"""
import os
import sys
import argparse
from msmbuilder.io import gather_metadata, save_meta, NumberedRunsParser
import numpy as np
#import seaborn as sns
from matplotlib import pyplot as plt

from msmbuilder.io import load_meta, render_meta

#sns.set_style('ticks')
#colors = sns.color_palette()

## Histogram of trajectory lengths
def plot_lengths(ax):
    lengths_ns = meta['nframes'] * (meta['step_ps'] / 1000)
    ax.hist(lengths_ns)
    ax.set_xlabel("Lenths / ns", fontsize=16)
    ax.set_ylabel("Count", fontsize=16)

    total_label = ("Total length: {us:.2f}"
                   .format(us=np.sum(lengths_ns) / 1000))
    total_label += r" / $\mathrm{\mu s}$"
    ax.annotate(total_label,
                xy=(0.05, 0.95),
                xycoords='axes fraction',
                fontsize=18,
                va='top',
                )

def parse_arg():
    parser = argparse.ArgumentParser(description='This Program is used to Find trajectories and associated metadata.')
    parser.add_argument('-i',dest='inp',help='A floder which contains *.xtc file or a xtc file path.',required=True)
    parser.add_argument('-t',dest='top',help='The topology file of the input xtc file',required=True)
    parser.add_argument('-dt',dest='dt', help='Trajectory frame step in picoseconds, default:200ps.(unit is ps)', default=200, type=int)
    parser.add_argument('-o',dest='out',help='The result file name defaul:meta_xtc.pickl.',default='meta_xtc.pickl')
    arg = parser.parse_args()

    return arg.inp,arg.top,arg.out,arg.dt

if __name__ == "__main__":
    ## parse args
    inp, top, outf, dt = parse_arg()

    ## get abspath
    inp = os.path.abspath(inp)
    top = os.path.abspath(top)
    gatherp = os.path.join(os.path.abspath('.'), "xtc_meta")
    if not  os.path.exists(gatherp):
        os.mkdir(gatherp)
    ## parse the xtc files
    i = 10000
    xtcfs = sorted([_ for _ in os.listdir(inp) if _.endswith(".xtc")])
    for xtc in xtcfs:
        new_xtc = "traj-%d.xtc"%i
        os.system('ln -s %s/%s %s/%s'%(inp,xtc,gatherp,new_xtc))
        i += 1

    ## meta the xtc file
    parser = NumberedRunsParser(
        traj_fmt="traj-{run}.xtc",
        top_fn=top,
        step_ps=dt,
    )
    meta = gather_metadata("%s/*.xtc"%gatherp, parser)
    save_meta(meta, meta_fn=outf)

    ## Plot hist
    fig, ax = plt.subplots(figsize=(7, 5))
    plot_lengths(ax)
    fig.tight_layout()
    fig.savefig("lengths-hist.pdf")

    ## Save metadata as html table
    render_meta(meta, 'meta.pandas.html')
